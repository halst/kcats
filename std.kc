#
#                     --- kcats standard library ---
# 
# Syntax:
# 
#     <command> 
#         Enter a textual <command> or several to execute on stack.
#         E.g. `fact` command will yield factorial of top-of-stack.
# 
#     <number>
#         Enter a <number> to push it on stack.
#         E.g. `1 500 10e-35 inf nan` will push the corresponding
#         floating-point values on stack.
# 
#     [<number>] 
#         Push a copy of <number>-th element on stack.
#         E.g. if stack consist of `2 4 8`, [0] will push the first
#         number (8) on top of stack: `2 4 8 8`.
# 
#     <name>: <commands> return 
#         Definition of <name> command, <commands> will be executed 
#         until 'return' keyword is encountered.
# 
#     if <condition> then <commands> return <other-commands>
#         If <condition> commands yields a non-zero value, 
#         then <commands> are executed until 'return' is encounterd;
#         if <condition> yields zero value, <other-commands> are
#         executed (commands after the closest 'return').
# 
#     . (i.e. dot) 
#         A short synonim for 'return' keyword.
#     
#     : (i.e. colon)
#         A short synonim for 'then' keyword.                
#     
#     # (i.e. hash)
#         Comment symbol.

# stack built-ins:
x: built-in.stack.pop .
s: built-in.stack.swap .
c: built-in.stack.clear .

# float built-ins:
+: built-in.float.+ .
*: built-in.float.* .
/: built-in.float./ .
^: built-in.float.^ .
>: built-in.float.> .

# str built-ins:
print: built-in.str.print .
input: built-in.str.input .
&: built-in.str.concat .

# other built-ins:
eval: built-in.eval .
meta: built-in.meta .
q: built-in.quit .

# 
# Standard definitons:
#

# Constants:

true:  1 . 
false: 0 . 

e:  2.71822 . 
pi: 3.14159 . 

# Syntactic sugar for duplication-d and deletion-x

d: [0] .
dd: [1] [1] .
ddd: [2] [2] [2] .
xx: x x .
xxx: x x x .

# Logical operations:

not:  0 == .  
!:    not .         # '!' short for 'not'
bool: not not . 
and:  * bool . 
or:   ! s ! and ! .
nor: or not .

if:   .     # Guess why 'if' and 'else'
else: .     # have such strange definitions?

# Comparison operators:

<:  s > .      # less-than
>=: < ! .
<=: > ! .
==: 
    if dd > -> xx false . 
    if dd < -> xx false . 
              xx true  .
!=: == ! .      # not equal


# Math:

-: -1 * + .    # substraction
max: 
    if dd > -> x . s x .
min:
    if dd < -> x . s x .
sign: 
    if d 0 > -> x +1 .
    if d 0 < -> x -1 . 
            else x  0 .
abs: 2 ^ 0.5 ^ .
abs2: if d 0 > -> pass . -1 * .
abs3: d sign * .


# Assert equal (draft, requires strings):
# 
# assert: 
#   if dd == : x .     # if equal - do nothing
#   else "assert error " pr pr " != " pr pr .     

# Factorial - long version

factorial: 
    if d 0 == then        
        x 1                 
    return
    else                    
        d 1 - factorial *    
    return

# Fact. shrt. ver.

fact: d 0 == -> x 1 .                  
      d 1 - fact * .                  

# Note that factorial versions above are identical
# except for keywords usage.

# Calulate factorial for values 1 to 10

f10: 0 _f10 .

_f10:
    if d 10 == -> x .  
    1 + d fib s _f10 . 


# Fibonacci function

fib:
    if d 0 == -> .
    if d 1 == -> .
  else d 1 - fib s 2 - fib + .



# Experimental part:
#
# +: '+' generic .
# pr: 'pr' generic .
# eq: 'eq' generic .
# 
# (: '(' '(' type-set .
# 
# (.pr: '(' pr . 
# str.pr: builtin.str.pr .
# float.+: builtin.float.+ .
#    
# generic:    
#     [2]     | 1 2 '+' 2
#     type    | 1 2 '+' 'float'
#     swp     | 1 2 'float' '+' 
#     '.'     | 1 2 'float' '+' '.'
#     swp     | 1 2 'float' '.' '+'
#     str.&   | 1 2 'float' '.+'
#     str.&   | 1 2 'float.+'
#     eval .  | 3
# 
# generic:
#     [2] type swp '.' swp str.& str.& eval .
# 
# generic:
#     eval(str.&(type($1) '.' $2) $3 $4)
#                     
# generic:    
#     [2]     | 'a' 'b' '+' 'b'
#     type    | 'a' 'b' '+' 'str'
#     swp     | 'a' 'b' 'str' '+' 
#     str.&   | 'a' 'b' 'str+'
#     eval .  | 'ab'
#
# generic: 
#     except $no-such-function try{
#         type-last
#         '.+'
#         str.&
#         #eval 
#         $no-such-function raise
#     }
#
# no-such-function: "no-such-function" make-exception .
#         
# 
# ( )+: 
#     if [2] type '(' == : swp x .
#     else + )+ . 
# 
# ( )+: '+' vararg .
# 
# vararg:   
#     if [3] type '(' == : x swp x .
#     else d -> eval ')' <- str.+ eval .
# 
# 
# 
# sign: 
#     if [1] 0 > then x +1 return
#     if [1] 0 < then x -1 return
#                        0 return    
# 
# sign: 
#     if [1] 0 > : x +1 .
#     if [1] 0 < : x -1 .
#                  0 .   
# 
# sign: 
#     if [1] 0 > then 
#         x +1 
#     else if [1] 0 < then 
#         x -1 
#     else 0 end if 
#     return 
#      
# sign: 
#     if [1] 0 > : 
#         x +1 
#     elif [1] 0 < : 
#         x -1 
#     else 0 ; 
#     return 
# 
# sign: 
#     [1] 0 > : x +1 .
#     [1] 0 < : x -1 .
#               0 .    
# sign: 
#     [1] 0 > : x +1 ,
#     [1] 0 < : x -1 ,
#               0 ; .
# 
# fact: [1] 0 == then fact(0) [1] 1 == then return fact(n) return
# fact(0): x 1 return
# fact(n): [1] 1 - fact * return
# 
# fact 0 = 1
# fact n = n * fact (n - 1)
# 
# fact: 
#     [1] 0 == then: x 1 
#              else: [1] 1 - fact * .
# fact: 
#     [1] 0 == then: x 1 . 
#                    [1] 1 - fact * .
# fact: 
#     [1] 0 == : x 1 . 
#   x [1] 1 == :           [1] 1 - fact * .
#              
# 
# nand: built-in
# dup: [1]
# dup2: [2] [1]
# xor: dup nand swp [2] nand swp [3] nand nand swp x
# xnor: xor not
